#pragma kernel ProcessCube
#include "Assets\Shaders\Compute\Includes\MarchingTables.compute"

struct Triangle {
    float3 vertexA;
    float3 vertexB;
    float3 vertexC;
};

AppendStructuredBuffer<Triangle> triangles;
RWTexture3D<float> densityMap;

int NumPointsPerAxis;
float isoLevel;
bool smoothTerrain;

int IndexFromCoord(int3 coord) {
	return coord.x + (coord.y + coord.z * (NumPointsPerAxis + 1)) * (NumPointsPerAxis + 1);
}

float SampleDensity(int3 coord) {
    return densityMap[coord];
}

float3 createVertex(int3 pointA, int3 pointB) {
    if (smoothTerrain) {
        // Interpolate between the 2 points based on the density
        float pointASample = SampleDensity(pointA);
        float pointBSample = SampleDensity(pointB);

        float t = (isoLevel - pointASample) / (pointBSample - pointASample);
	    float3 position = (float3) pointA + t *  (float3) (pointB - pointA);

        return position;
    } else {
        // Return the middle point between the 2
        return (float3) (pointA + pointB) * 0.5f;
    }
}

[numthreads(8,8,8)]
void ProcessCube (int3 id : SV_DispatchThreadID) {
    
    if (id.x >= NumPointsPerAxis || id.y >= NumPointsPerAxis || id.z >= NumPointsPerAxis) {
        return;
    }

    int3 cornerCoords[8];
    for (int c = 0; c < 8; c++) {
        cornerCoords[c] = id + cubeCorners[c];
    }

    int cubeConfig = 0;
    for (int j = 0; j < 8; j++) {
        if (SampleDensity(cornerCoords[j]) < isoLevel) {
            cubeConfig |= (1 << j);
        }
    }

    int edgeIndices[16] = triangulation[cubeConfig];

    for (int i = 0; i < 16; i += 3) {
        if (edgeIndices[i] == -1) { break; }

        int edgeIndexA = edgeIndices[i+0];
		int a0 = cornerIndexAFromEdge[edgeIndexA];
		int a1 = cornerIndexBFromEdge[edgeIndexA];

		int edgeIndexB = edgeIndices[i+1];
		int b0 = cornerIndexAFromEdge[edgeIndexB];
		int b1 = cornerIndexBFromEdge[edgeIndexB];

		int edgeIndexC = edgeIndices[i+2];
		int c0 = cornerIndexAFromEdge[edgeIndexC];
		int c1 = cornerIndexBFromEdge[edgeIndexC];

		// Calculate positions of each vertex.
		float3 vertexA = createVertex(cornerCoords[a0], cornerCoords[a1]);
		float3 vertexB = createVertex(cornerCoords[b0], cornerCoords[b1]);
		float3 vertexC = createVertex(cornerCoords[c0], cornerCoords[c1]);

        // Create triangle
		Triangle tri;
		tri.vertexA = vertexC;
		tri.vertexB = vertexB;
		tri.vertexC = vertexA;
		triangles.Append(tri);
    }
}
