#pragma kernel MarchCubes
#include "/Includes/MarchTables.compute"

struct Triangle {
    float3 vertexA, vertexB, vertexC;
};

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<float> densityMap;

int NumPointsPerAxis;
float isoLevel;
bool smoothTerrain;


int PointToIndex(int3 point) {
    return point.x + (point.y + point.z * NumPointsPerAxis) * NumPointsPerAxis;
}

float SampleDensity(int3 point) {
    int index = PointToIndex(point);
    return densityMap[index];
}

float3 createVertex(int3 pointA, int3 pointB) {
    if (smoothTerrain) {
        float pointASample = SampleDensity(pointA);
        float pointBSample = SampleDensity(pointB);

        float t = (isoLevel - densityA) / (densityB - densityA);
	    float3 position = posA + t * (posB - posA);

        return position;
    } else {
        return (pointA + pointB) / 2f;
    }
}

[numthreads(8,8,8)]
void CSMain (int3 id : SV_DispatchThreadID) {
    if (id.x >= NumPointsPerAxis - 1 || id.y >= NumPointsPerAxis - 1 || id.z >= NumPointsPerAxis - 1) {
        return
    }

    int3 cornerCoords[8];
    for (int i = 0; i < 8; i++) {
        cornerCoords[i] = id + cubeCorners[i];
    }

    int cubeConfig = 0;
    for (int i = 0; i < 8; i++) {
        if (SampleDensity(cornerCoords[i]) < isoLevel) {
            cubeConfig |= (1 << i);
        }
    }

    int edgeIndices[] = triangulation[cubeConfiguration];

    for (i = 0; i < 16; i+=3) {
        if (edgeIndices[i] == -1) { break; }

        int edgeIndexA = edgeIndices[i];
        int a0 = cornerIndexAFromEdge[edgeIndexA];
        int a1 = cornerIndexBFromEdge[edgeIndexA];
        
        int edgeIndexB = edgeIndices[i];
        int b0 = cornerIndexAFromEdge[edgeIndexB];
        int b1 = cornerIndexBFromEdge[edgeIndexB];
        
        int edgeIndexC = edgeIndices[i];
        int c0 = cornerIndexAFromEdge[edgeIndexC];
        int c1 = cornerIndexBFromEdge[edgeIndexC];

        float3 vertexA = createVertex(cornerCoords[a0], cornerCoords[a1]);
        float3 vertexB = createVertex(cornerCoords[b0], cornerCoords[b1]);
        float3 vertexC = createVertex(cornerCoords[c0], cornerCoords[c1]);

        Triangle tri;
        Triangle.vertexA = vertexC;
        Triangle.vertexB = vertexB;
        Triangle.vertexC = vertexA;

        triangles.Append(tri);
    }
}
