#pragma kernel GetDensityMap
#include "Assets\Shaders\Compute\Includes\NoiseFunctions.compute"

RWTexture3D<float> densityMap;
int textureSize;
float3 chunkCoords;
float chunkSize;

float planetRadius;
float noiseFrequency;
float noiseScale;
float heightMultiplier;
float heightModifier;

float3 GetWorldSpaceOfPoint(int3 index) {
    return index + (chunkCoords * chunkSize);
}

float fbm(int numLayers, float lacunarity, float persistence, float scale, float3 pos) {
    float noise = 0;
    float frequency = scale / 100;
    float amplitude = 1;

    for (int i = 0; i < numLayers; i ++) {
        float n = 1-abs(snoise(pos * frequency)*2-1);
        //n*=n;
        noise += n * amplitude;

        amplitude *= persistence;
        frequency *= lacunarity;
    }

    return noise;
}

[numthreads(8,8,8)]
void GetDensityMap(uint3 id : SV_DispatchThreadID) {
    float3 pos = GetWorldSpaceOfPoint(id);

    float halfS = planetRadius / 2;
	float maxD = length(float3(halfS,halfS,halfS));

	float fudge = 0.1339748f * planetRadius;
	float density = length(pos) / (maxD + fudge) - 0.5;
    float noise = fbm(6, 2, 0.5, noiseScale, (pos / length(pos)) * planetRadius * noiseFrequency) * heightMultiplier;

    if (noise < 0) {
        density += noise;
    }
    densityMap[id] = density;
}
